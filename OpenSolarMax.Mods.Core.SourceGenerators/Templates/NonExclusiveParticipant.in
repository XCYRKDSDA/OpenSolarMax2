using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Arch.Core;
using Arch.Core.Extensions;
using OpenSolarMax.Mods.Core.Components;
using OpenSolarMax.Mods.Core.Utils;

namespace @NAMESPACE@;

partial @RELATIONSHIP_SYMBOL@ @RELATIONSHIP_TYPE@
{
    public struct @PARTICIPANT_TYPE@(): IParticipantIndex
    {
        public Dictionary<EntityReference, @RELATIONSHIP_TYPE@> Relationships = [];
        
        #region IParticipantIndex
        
        readonly int ICollection<EntityReference>.Count => Relationships.Count;

        readonly bool ICollection<EntityReference>.IsReadOnly => false;
        
        readonly void ICollection<EntityReference>.CopyTo(EntityReference[] array, int arrayIndex)
        {
            Relationships.Keys.CopyTo(array, arrayIndex);
        }
        
        readonly IEnumerator<EntityReference> IEnumerable<EntityReference>.GetEnumerator()
        {
            return Relationships.Keys.GetEnumerator();
        }
        
        readonly IEnumerator IEnumerable.GetEnumerator()
        {
            return (this as IEnumerable<EntityReference>).GetEnumerator();
        }
        
        readonly bool ICollection<EntityReference>.Contains(EntityReference relationship)
        {
            return Relationships.ContainsKey(relationship);
        }
        
        void ICollection<EntityReference>.Add(EntityReference relationship)
        {
            Relationships.Add(relationship, relationship.Entity.Get<@RELATIONSHIP_TYPE@>());
        }
        
        bool ICollection<EntityReference>.Remove(EntityReference relationship)
        {
            return Relationships.Remove(relationship);
        }
        
        void ICollection<EntityReference>.Clear()
        {
            Relationships.Clear();
        }
        
        #endregion
    }
}
