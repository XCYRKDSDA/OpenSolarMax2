using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Arch.Core;
using Arch.Core.Extensions;
using OpenSolarMax.Mods.Core.Components;
using OpenSolarMax.Mods.Core.Utils;

namespace @NAMESPACE@;

partial @RELATIONSHIP_SYMBOL@ @RELATIONSHIP_TYPE@
{
    public struct @PARTICIPANT_TYPE@(): IParticipantIndex
    {        
        public (EntityReference Ref, @RELATIONSHIP_TYPE@ Copy)? Relationship = null;
        
        #region IParticipantIndex
        
        readonly int ICollection<EntityReference>.Count => Relationship is null ? 0 : 1;

        readonly bool ICollection<EntityReference>.IsReadOnly => false;
        
        readonly void ICollection<EntityReference>.CopyTo(EntityReference[] array, int arrayIndex)
        {
            if (Relationship.HasValue)
                array[arrayIndex] = Relationship.Value.Ref;
        }
        
        readonly IEnumerator<EntityReference> IEnumerable<EntityReference>.GetEnumerator()
        {
            if (Relationship.HasValue)
                yield return Relationship.Value.Ref;
        }
        
        readonly IEnumerator IEnumerable.GetEnumerator()
        {
            return (this as IEnumerable<EntityReference>).GetEnumerator();
        }
        
        readonly bool ICollection<EntityReference>.Contains(EntityReference relationship)
        {
            if (!Relationship.HasValue)
                return false;
            return Relationship.Value.Ref == relationship;
        }
        
        void ICollection<EntityReference>.Add(EntityReference relationship)
        {
            if (Relationship.HasValue)
                throw new IndexOutOfRangeException();
            Relationship = (relationship, relationship.Entity.Get<@RELATIONSHIP_TYPE@>());
        }
        
        bool ICollection<EntityReference>.Remove(EntityReference relationship)
        {
            if (!Relationship.HasValue)
                return false;
        
            if (Relationship.Value.Ref != relationship)
                return false;
        
            Relationship = null;
            return true;
        }
        
        void ICollection<EntityReference>.Clear()
        {
            Relationship = null;
        }
        
        #endregion
    }
}
